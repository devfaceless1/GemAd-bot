import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, WebAppInfo
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from dotenv import load_dotenv

# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =======================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-domain.com")

# =======================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =======================
bot = Bot(token=TOKEN)
dp = Dispatcher()
app = FastAPI()

# =======================
# /start handler —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –º–∏–Ω–∏-–∞–ø–ø
# =======================
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    image_path = "images/gemad.jpg"
    photo = FSInputFile(image_path)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø",
                    web_app=WebAppInfo(url="https://gemad.onrender.com/")
                )
            ]
        ]
    )

    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–∏–Ω–∏-–∞–ø–ø.",
        reply_markup=keyboard
    )

# =======================
# Webhook
# =======================
@app.post("/")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return PlainTextResponse("ok")

# =======================
# Root endpoint
# =======================
@app.get("/")
def root():
    return PlainTextResponse("Bot is running!")

# =======================
# Startup
# =======================
@app.on_event("startup")
async def on_startup():
    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        await bot.set_webhook(WEBHOOK_URL)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")

# =======================
# Shutdown
# =======================
@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
    print("üõë Bot session –∑–∞–∫—Ä—ã—Ç")
