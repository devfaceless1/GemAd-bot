# bot.py ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–∑–æ–ª–≤–æ–º channel -> chat_id
import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, WebAppInfo
from aiogram.enums import ChatMemberStatus
from motor.motor_asyncio import AsyncIOMotorClient
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 10))  # seconds, reduce for testing

if not TOKEN or not MONGO_URI:
    raise SystemExit("ERROR: BOT_TOKEN and MONGO_URI must be set in environment or .env")

bot = Bot(token=TOKEN)
dp = Dispatcher()
app = FastAPI()

mongo = AsyncIOMotorClient(MONGO_URI)
db = mongo["test"]
pending = db["pendings"]
users = db["users"]

# -----------------------
# Helpers
# -----------------------
def now_str():
    return datetime.utcnow().isoformat()

async def safe_set_webhook(url: str, max_retries: int = 5):
    backoff = 1
    for attempt in range(1, max_retries + 1):
        try:
            await bot.set_webhook(url)
            print(f"[{now_str()}] ‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
            return True
        except Exception as e:
            print(f"[{now_str()}] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            # –µ—Å–ª–∏ Telegram –ø—Ä–æ—Å–∏—Ç retry_after, –≤—ã–¥–µ—Ä–∂–∏–º –ø–∞—É–∑—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if "retry after" in str(e).lower() or "too many requests" in str(e).lower() or "flood" in str(e).lower():
                await asyncio.sleep(backoff)
                backoff = min(backoff * 2, 30)
            else:
                # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–∞—ë–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë
                await asyncio.sleep(backoff)
                backoff = min(backoff * 2, 30)
    print(f"[{now_str()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

async def resolve_chat_id(raw_channel):
    if raw_channel is None:
        return None

    # –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ-—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
    try:
        if isinstance(raw_channel, int):
            return raw_channel
        chs = str(raw_channel).strip()
        # numeric channel id like -1001234567890
        if chs.lstrip("-").isdigit():
            return int(chs)
    except Exception:
        pass

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç (works with @username or username)
    candidates = [str(raw_channel).strip()]
    if not str(raw_channel).startswith("@"):
        candidates.append("@" + str(raw_channel).strip())

    for cand in candidates:
        try:
            chat = await bot.get_chat(cand)
            print(f"[{now_str()}] ‚ÑπÔ∏è get_chat('{cand}') -> id={chat.id}, type={chat.type}, title={getattr(chat,'title',None)}")
            return int(chat.id)
        except Exception as e:
            print(f"[{now_str()}] ‚ö†Ô∏è get_chat('{cand}') failed: {e}")

    print(f"[{now_str()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å channel '{raw_channel}' –≤ chat_id")
    return None

# -----------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
# -----------------------
async def process_queue_iteration():
    now = datetime.utcnow()
    print(f"[{now_str()}] üîÑ –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (now={now.isoformat()})")
    # –ù–∞–π–¥—ë–º –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö checkAfter <= now –∏ —Å—Ç–∞—Ç—É—Å waiting
    cursor = pending.find({"status": "waiting", "checkAfter": {"$lte": now}})
    async for task in cursor:
        tid = str(task.get("_id"))
        telegram_id_raw = task.get("telegramId")
        channel_raw = task.get("channel")
        reward = int(task.get("reward", 15))

        print(f"[{now_str()}] ‚ñ∂ Task {tid}: telegramId={telegram_id_raw!r}, channel={channel_raw!r}, reward={reward}")

        # –ü—Ä–∏–≤–µ–¥—ë–º telegram id –∫ int
        try:
            user_id = int(str(telegram_id_raw).strip())
        except Exception as e:
            print(f"[{now_str()}] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π telegramId –≤ –∑–∞–¥–∞—á–µ {tid}: {telegram_id_raw!r} ‚Äî –ø–æ–º–µ—á–∞—é failed ({e})")
            await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "failed", "error": "invalid telegramId"}})
            continue

        # –†–µ–∑–æ–ª–≤–∏–º channel -> chat_id
        chat_id = await resolve_chat_id(channel_raw)
        if chat_id is None:
            # –µ—Å–ª–∏ –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è ‚Äî –ø–æ–º–µ—Ç–∏–º failed (–Ω–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ skipped, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "failed", "error": "channel_resolve_failed"}})
            print(f"[{now_str()}] ‚ùå Task {tid}: channel resolution failed, set status=failed")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_doc = await users.find_one({"telegramId": str(user_id)})
            if user_doc:
                subs = user_doc.get("subscribedChannels", [])
                # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ chat_id —Å—Ç—Ä–æ–∫–æ–π/—á–∏—Å–ª–æ–º ‚Äî —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ chat_id
                if str(chat_id) in [str(s) for s in subs]:
                    print(f"[{now_str()}] ‚ÑπÔ∏è Task {tid}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ subscribedChannels -> –ø–æ–º–µ—Ç–∏–ª skipped")
                    await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "skipped"}})
                    continue
        except Exception as e:
            print(f"[{now_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users –¥–ª—è task {tid}: {e}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            status = getattr(member, "status", None)
            status_str = str(status).lower() if status else None
            print(f"[{now_str()}] ‚ÑπÔ∏è Task {tid}: get_chat_member(chat_id={chat_id}, user_id={user_id}) -> status={status_str}")
        except Exception as e:
            print(f"[{now_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ get_chat_member –¥–ª—è task {tid}, chat_id={chat_id}, user_id={user_id}: {e}")
            # –∑–∞–ø–∏—à–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –∑–∞–¥–∞—á—É –∏ –ø–æ–º–µ—Ç–∏–º failed
            await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "failed", "error": f"get_chat_member_error: {str(e)}"}})
            continue

        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º
        if status_str in ("member", "administrator", "creator", "owner"):
            try:
                res = await users.update_one(
                    {"telegramId": str(user_id)},
                    {
                        "$inc": {"balance": reward, "totalEarned": reward},
                        "$addToSet": {"subscribedChannels": str(chat_id)}
                    },
                    upsert=True
                )
                print(f"[{now_str()}] ‚úÖ Task {tid}: Reward –Ω–∞—á–∏—Å–ª–µ–Ω (mongo modified={getattr(res,'modified_count',None)})")
                try:
                    await bot.send_message(user_id, f"üéâ –¢—ã –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏–ª {reward}‚≠ê!")
                    print(f"[{now_str()}] ‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e_send:
                    print(f"[{now_str()}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_send}")
                await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "rewarded", "processedAt": datetime.utcnow()}})
            except Exception as e:
                print(f"[{now_str()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ users/pending –¥–ª—è task {tid}: {e}")
                await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "failed", "error": f"mongo_update_error: {e}"}})
        else:
            # –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            print(f"[{now_str()}] ‚ùå Task {tid}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ({status_str}) ‚Äî –ø–æ–º–µ—á–∞—é failed")
            await pending.update_one({"_id": task["_id"]}, {"$set": {"status": "failed", "memberStatus": str(status)}})

    print(f"[{now_str()}] ‚è± –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# -----------------------
# –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª
# -----------------------
async def background_checker():
    while True:
        try:
            await process_queue_iteration()
        except Exception as e:
            print(f"[{now_str()}] ‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ background_checker: {e}")
        await asyncio.sleep(CHECK_INTERVAL)

# -----------------------
# Handlers –∏ Webhook
# -----------------------
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    image_path = "images/gemad.jpg"
    try:
        photo = FSInputFile(image_path)
    except Exception as e:
        print(f"[{now_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        photo = None

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø", web_app=WebAppInfo(url="https://gemad.onrender.com/"))]
    ])
    if photo:
        await message.answer_photo(photo=photo, caption="–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–∏–Ω–∏-–∞–ø–ø.", reply_markup=keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! (–∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)", reply_markup=keyboard)

@app.post("/")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return PlainTextResponse("ok")

@app.get("/")
def root():
    return PlainTextResponse("Bot is running!")

# -----------------------
# Startup / Shutdown
# -----------------------
@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await safe_set_webhook(WEBHOOK_URL)
    else:
        print(f"[{now_str()}] ‚ö†Ô∏è WEBHOOK_URL –ø—É—Å—Ç–æ–π ‚Äî –Ω–µ —Å—Ç–∞–≤–ª—é webhook")

    asyncio.create_task(background_checker())
    print(f"[{now_str()}] üöÄ Background checker –∑–∞–ø—É—â–µ–Ω (interval={CHECK_INTERVAL}s)")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.session.close()
        print(f"[{now_str()}] üõë Bot session –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"[{now_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot.session: {e}")
